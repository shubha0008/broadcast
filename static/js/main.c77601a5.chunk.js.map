{"version":3,"sources":["Login/Login.jsx","Login/Logout.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","memberLogIn","signup","useState","view","setView","setMembers","email","password","info","setInfo","useEffect","fetch","then","res","json","member","catch","className","type","value","onChange","event","target","onClick","onSubmit","preventDefault","data","method","headers","body","JSON","stringify","concat","console","log","saveSignUP","id","name","for","Logout","App","loggedIn","setLoggedIn","signUPPortal","currentUser","setCurrentUser","userId","localStorage","getItem","val","find","apiKey","appId","token","notify","options","reactions","recent","Activity","props","Footer","style","padding","activity","onAddReaction","activityId","validLogIn","mem","undefined","alert","setItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kZA6IeA,EA3ID,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAA0B,KAAbC,OACJC,mBAAS,kBADQ,mBAClCC,EADkC,KAC5BC,EAD4B,OAEXF,mBAAS,IAFE,mBAEzBG,GAFyB,aAGjBH,mBAAS,CAAEI,MAAO,GAAIC,SAAU,KAHf,mBAGlCC,EAHkC,KAG5BC,EAH4B,KAOzCC,qBAAU,WACRD,EAAQ,CAAEH,MAAO,GAAIC,SAAU,KAC/BI,MAAM,iCAAiCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UACtDF,MAAK,YAAe,IAAbG,EAAY,oBAClBV,EAAWU,MAEZC,OAAM,kBAAMZ,EAAQ,cACtB,CAACD,IAmCJ,OACE,yBAAKc,UAAU,UACH,kBAATd,EACC,6BACE,wDACA,2BACEe,KAAK,OACLC,MAAOX,EAAKF,MACZc,SAAU,SAACC,GAAD,OACRZ,EAAQ,2BAAKD,GAAN,IAAYF,MAAOe,EAAMC,OAAOH,YAG3C,2BACED,KAAK,WACLC,MAAOX,EAAKD,SACZa,SAAU,SAACC,GAAD,OACRZ,EAAQ,2BAAKD,GAAN,IAAYD,SAAUc,EAAMC,OAAOH,YAG9C,4BAAQI,QAAS,kBAAMvB,EAAYQ,KAAnC,UACA,0BAAMe,QAAS,kBAAMnB,EAAQ,aAA7B,WACI,yBAAKa,UAAU,QAInB,KAEM,YAATd,EACC,6BACE,uCACA,0BAAMqB,SAjDK,SAACH,GACdA,EAAMI,iBAfO,SAACC,GAAD,OACjBf,MAAM,gCAAiC,CACrCgB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUL,KAEpBd,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAC,GACJR,GAAW,SAACqB,GAAD,OAAUA,EAAKM,OAAO,CAACnB,OAClCoB,QAAQC,IAAIrB,MAiBZsB,CAFa,CAAEC,GATJf,EAAMC,OAAOc,GAAGjB,MASTkB,KARLhB,EAAMC,OAAOe,KAAKlB,MAQRb,MAPTe,EAAMC,OAAOhB,MAAMa,MAOJZ,SANZc,EAAMC,OAAOf,SAASY,QAQtBP,MAAK,WACpBR,EAAQ,aAoCN,yBAAKa,UAAY,kBACjB,2BAAOqB,IAAI,OAAOrB,UAAY,2BAA9B,QACA,yBAAKA,UAAY,aACjB,2BAAOC,KAAK,OAAOkB,GAAG,OAAOC,KAAK,OAAOpB,UAAU,mBAInD,6BAEA,yBAAKA,UAAY,kBACjB,2BAAOqB,IAAI,QAAQrB,UAAY,2BAA/B,SACA,yBAAKA,UAAY,aACjB,2BAAOC,KAAK,OAAOkB,GAAG,QAAQC,KAAK,QAAQpB,UAAU,mBAIrD,6BAEA,yBAAKA,UAAY,kBACjB,2BAAOqB,IAAI,WAAWrB,UAAY,4BAAlC,YACA,yBAAKA,UAAY,aACjB,2BAAOC,KAAK,WAAWkB,GAAG,WAAWC,KAAK,WAAWpB,UAAU,mBAI/D,6BAEA,2BAAOC,KAAK,SAASC,MAAM,YAG7B,0BAAMI,QAAS,kBAAMnB,EAAQ,mBAA7B,qBAIA,KAgBA,YAATD,GACO,0BAAMoB,QAAS,kBAAMnB,EAAS,mBAA9B,Y,QC7HOmC,G,cANA,WACX,OACI,kBAAC,EAAD,QCyEOC,MAtEf,WAAgB,IAAD,EACkBtC,oBAAS,GAD3B,mBACPuC,EADO,KACGC,EADH,OAEiBxC,oBAAS,GAF1B,mBAECyC,GAFD,aAGwBzC,mBAAS,IAHjC,mBAGP0C,EAHO,KAGMC,EAHN,KAgCd,OA3BAnC,qBAAU,WACTC,MAAM,iCACLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GACL,IAAM+B,EAASC,aAAaC,QAAQ,WACrC,GAAIF,EAAQ,CACXJ,GAAY,GACZ,IAAIO,EAAMlC,EAAOmC,MAAK,SAACxB,GAAD,OAAUA,EAAKU,KAAOU,KAC5CD,EAAeI,EAAIZ,SACjB,OAmBH,yBAAKpB,UAAU,QACA,IAAbwB,EACD,6BACC,6BAAK,uCAAaG,IACnB,6BACC,kBAAC,IAAD,CACIO,OAAO,eACPC,MAAM,QACNC,MAAM,wJAEN,kBAAC,IAAD,CAAsBC,QAAM,IAC5B,kBAAC,IAAD,CACEC,QAAS,CAACC,UAAW,CAAEC,QAAQ,IAC/BH,QAAM,EACNI,SAAU,SAACC,GAAD,OACN,kBAAC,IAAD,iBAAcA,EAAd,CACEC,OAAQ,kBACN,yBAAKC,MAAQ,CAACC,QAAS,aACrB,kBAAC,IAAeH,GAChB,kBAAC,IAAD,CACEI,SAAUJ,EAAMI,SAChBC,cAAeL,EAAMK,gBACvB,kBAAC,IAAD,CAAaC,WAAYN,EAAMI,SAAS3B,eAQzD,4BAAQb,QAAY,WAAO,OAAO,kBAAC,EAAD,QAAlC,WAEI,kBAAC,EAAD,CAAOvB,YAjDO,SAAC,GAAyB,IAAvBM,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7BI,MAAM,iCACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UACnBF,MAAK,SAAAG,GACN,IAAMmD,EAAanD,EAAOmC,MAAK,SAACiB,GAAD,OAASA,EAAI7D,QAAUA,GAAS6D,EAAI5D,WAAaA,UAC7D6D,IAAfF,EACHG,MAAM,+BAENtB,aAAauB,QAAQ,UAAWJ,EAAW9B,IAC3CO,GAAa,GACbD,GAAY,YCtBK6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdrE,OAAM,SAAAsE,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.c77601a5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Login = ({ memberLogIn, signup }) => {\r\n  const [view, setView] = useState(\"MEMBER_LOG_IN\");\r\n  const [members, setMembers] = useState([]);\r\n  const [info, setInfo] = useState({ email: \"\", password: \"\" });\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    setInfo({ email: \"\", password: \"\" });\r\n    fetch(\"http://localhost:4050/Members\").then((res) => res.json())\r\n      .then(([member]) => {\r\n        setMembers(member);\r\n      })\r\n      .catch(() => setView(\"Error\"));\r\n  }, [view]);\r\n\r\n  const saveSignUP = (data) =>\r\n    fetch(\"http://localhost:4050/Members\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(res => {\r\n        setMembers((data) => data.concat([res]));\r\n        console.log(res);\r\n      });\r\n\r\n      const onSave = (event) => {\r\n        event.preventDefault();\r\n    \r\n        const id = event.target.id.value;\r\n        const name = event.target.name.value;\r\n        const email = event.target.email.value;\r\n        const password = event.target.password.value;\r\n        // const age = event.target.age.value;\r\n        // const BornAt = event.target.BornAt.value;\r\n        // const Birthdate = event.target.Birthdate.value;\r\n        // const photo = event.target.photo.value; ,age,BornAt,Birthdate,photo\r\n    \r\n        const data = { id,name,email,password };\r\n    \r\n        saveSignUP(data).then(() => {\r\n          setView(\"VIEW\"); \r\n        });\r\n      };\r\n\r\n  return (\r\n    <div className=\"Log-in\">\r\n      {view === \"MEMBER_LOG_IN\" ? (\r\n        <div>\r\n          <h3>Welcome to Broadcast APP</h3>\r\n          <input\r\n            type=\"text\"\r\n            value={info.email}\r\n            onChange={(event) =>\r\n              setInfo({ ...info, email: event.target.value })\r\n            }\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={info.password}\r\n            onChange={(event) =>\r\n              setInfo({ ...info, password: event.target.value })\r\n            }\r\n          />\r\n          <button onClick={() => memberLogIn(info)}>Log in</button>\r\n          <span onClick={() => setView(\"SIGN_UP\")}>Sign UP</span>\r\n              <div className=\"bg\">\r\n                  \r\n              </div>\r\n        </div>\r\n      ) : null}\r\n\r\n      {view === \"SIGN_UP\" ? (\r\n        <div>\r\n          <h3>Sign UP</h3>\r\n          <form onSubmit={onSave}>\r\n            \r\n            <div className = \"form-group row\" >\r\n            <label for=\"name\" className = \"col-sm-2 col-form-label\">Name</label>\r\n            <div className = \"col-sm-10\">\r\n            <input type=\"text\" id=\"name\" name=\"name\" className=\"inputDisplay\" />\r\n            </div>\r\n            </div>\r\n\r\n            <br />\r\n            \r\n            <div className = \"form-group row\" >\r\n            <label for=\"email\" className = \"col-sm-2 col-form-label\">Email</label>\r\n            <div className = \"col-sm-10\">\r\n            <input type=\"text\" id=\"email\" name=\"email\" className=\"inputDisplay\" />\r\n            </div>\r\n            </div>\r\n            \r\n            <br />\r\n            \r\n            <div className = \"form-group row\" >\r\n            <label for=\"password\" className = \"col-sm-2 col-form-label \">Password</label>\r\n            <div className = \"col-sm-10\">\r\n            <input type=\"password\" id=\"password\" name=\"password\" className=\"inputDisplay\"/>\r\n            </div>\r\n            </div>\r\n            \r\n            <br />\r\n            \r\n            <input type=\"submit\" value=\"Submit\" />\r\n            \r\n          </form>\r\n          <span onClick={() => setView(\"MEMBER_LOG_IN\")}>\r\n            Go to login page\r\n          </span>\r\n        </div>\r\n      ) : null}\r\n\r\n{/* {view === \"VIEW\" && (\r\n        <table>\r\n         \r\n          {members.map(({ id,name,email,password }) => (\r\n            <tr key={id} style={{ border: \"1px solid blacks\" }}>\r\n              <td>{id}</td>\r\n              <td>{name}</td>\r\n              <td>{email}</td>\r\n              <td>{password}</td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      )} */}\r\n\r\n{view === \"LOG_OUT\" && (\r\n        <span onClick={() => setView( \"MEMBER_LOG_IN\")}>Logout</span>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useState, useEffect } from \"react\";\r\nimport Login from './Login'\r\n\r\nconst Logout = () => {\r\n    return (\r\n        <Login />\r\n    )\r\n}\r\n\r\nexport default Logout","import React, { useEffect, useState,useReducer } from 'react'\nimport './App.css'\nimport Login from './Login/Login'\nimport { StreamApp, NotificationDropdown, FlatFeed, LikeButton, Activity, CommentField, CommentList } from 'react-activity-feed';\nimport 'react-activity-feed/dist/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Logout from './Login/Logout';\n\nfunction App() {\n\tconst [loggedIn, setLoggedIn] = useState(false)\n\tconst [signUP, signUPPortal] = useState(false)\n\tconst [currentUser, setCurrentUser] = useState('')\n\n\tuseEffect(() => {\n\t\tfetch(\"http://localhost:4050/Members\")\n\t\t.then((res) => res.json())\n\t\t.then(member => {\n\t\t const userId = localStorage.getItem('user_id')\n\t\tif (userId) {\n\t\t\tsetLoggedIn(true)\n\t\t\tlet val = member.find((data) => data.id === userId)\n\t\t\tsetCurrentUser(val.name)\n\t\t}},[])\n})\n\tconst memberLogIn = ({ email, password }) => {\n\t\tfetch(\"http://localhost:4050/Members\")\n\t\t .then((res) => res.json())\n\t\t.then(member => {\n\t\tconst validLogIn = member.find((mem) => mem.email === email && mem.password === password)\n\t\tif (validLogIn === undefined) {\n\t\t\talert('Invalid Email and Password')\n\t\t} else {\n\t\t\tlocalStorage.setItem('user_id', validLogIn.id)\n\t\t\tsignUPPortal(false)\n\t\t\tsetLoggedIn(true)\n\t\t}})\n\t}\n\n\t\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{loggedIn === true ? (\n\t\t\t<div>\n\t\t\t\t<div><h1>Welcome {currentUser}</h1></div>\n\t\t\t<div>\n\t \t\t<StreamApp\n        apiKey=\"du8he7epvp94\"\n        appId=\"45206\"\n        token=\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMjRlMTU2YTEtNzM4My00NmQ0LWFhMzgtZGQ5Nzc2ZDA5MzY2In0.NC0nR8jLUb8ebk7F2RRs4Z9XRKozlFs268vZ4LpXZdU\"\n          >\n        <NotificationDropdown notify />\n        <FlatFeed\n          options={{reactions: { recent: true } }}\n          notify\n          Activity={(props) =>\n              <Activity {...props}\n                Footer={() => (\n                  <div style={ {padding: '8px 16px'} }>\n                    <LikeButton {...props} />\n                    <CommentField\n                      activity={props.activity}\n                      onAddReaction={props.onAddReaction} />\n                    <CommentList activityId={props.activity.id} />\n                  </div>\n                )}\n              />\n            }\n          />\n      </StreamApp>\n\t  </div>\n\t  <button onClick =  {() => {return(<Logout/>)}}>Logout</button>\n\t  </div>\n\t\t\t) : <Login memberLogIn={memberLogIn} />}\n\t\t\t{/* {signUPPortal === false ? (null) : (<Login memberLogIn={memberLogIn} />)} */}\n\t\t</div>\n\t)\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}